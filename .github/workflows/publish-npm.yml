# .github/workflows/publish-npm.yml

name: Publish Package to npm

on:
  push:
    tags:
      - "v*" # Triggers on tags like v1.0.0, v0.1.0-beta, v2.3.4 etc.

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Permission to read the repository contents

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest # Or a specific Bun version if needed

      - name: Install dependencies
        run: bun install --frozen-lockfile # Ensures use of versions from bun.lockb

      # The 'bun run build' step is executed by the 'prepare' script in package.json,
      # which 'bun publish' runs automatically when not given a tarball.

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=$(echo $GITHUB_REF_NAME | sed 's/v//')" >> $GITHUB_OUTPUT

      - name: Determine npm dist-tag
        id: npm_dist_tag
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          if [[ "$VERSION" == *-* ]]; then
            # For versions like 1.0.0-beta.1, use 'beta' as the tag
            # For versions like 1.0.0-alpha.0, use 'alpha' as the tag
            # Extracts the first part of the prerelease identifier
            echo "DIST_TAG=$(echo $VERSION | awk -F'-' '{print $2}' | awk -F'.' '{print $1}')" >> $GITHUB_OUTPUT
          else
            # For stable versions like 1.0.0, use 'latest'
            echo "DIST_TAG=latest" >> $GITHUB_OUTPUT
          fi

      - name: Verify and update package.json version
        run: |
          TAG_VERSION="${{ steps.get_version.outputs.VERSION }}"

          # Get current package.json version
          echo "console.log(require('./package.json').version);" > get_pkg_version.js
          PACKAGE_JSON_VERSION=$(bun run get_pkg_version.js)
          rm get_pkg_version.js

          echo "Git Tag Version: $TAG_VERSION"
          echo "package.json Version: $PACKAGE_JSON_VERSION"

          # Extract base version from both (everything before the first '-')
          TAG_BASE=$(echo "$TAG_VERSION" | cut -d'-' -f1)
          PKG_BASE=$(echo "$PACKAGE_JSON_VERSION" | cut -d'-' -f1)

          echo "Tag Base Version: $TAG_BASE"
          echo "Package Base Version: $PKG_BASE"

          # Verify base versions match
          if [ "$TAG_BASE" != "$PKG_BASE" ]; then
            echo "Error: Base version mismatch. Tag base ($TAG_BASE) must match package.json base ($PKG_BASE)."
            echo "Please update package.json to have base version $TAG_BASE"
            exit 1
          fi

          # Update package.json version to match tag version
          if [ "$TAG_VERSION" != "$PACKAGE_JSON_VERSION" ]; then
            echo "Updating package.json version from $PACKAGE_JSON_VERSION to $TAG_VERSION"
            # Use node to update package.json version
            node -e "
              const fs = require('fs');
              const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
              pkg.version = '$TAG_VERSION';
              fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
            "
            echo "package.json version updated successfully"
          else
            echo "package.json version already matches tag version"
          fi

      - name: Publish to npm with Bun
        # 'bun publish' will use the version from your package.json.
        # The --tag flag here sets the npm distribution tag.
        run: bun publish --tag ${{ steps.npm_dist_tag.outputs.DIST_TAG }} --access public
        env:
          # Bun publish respects NPM_CONFIG_TOKEN for authentication
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_TOKEN }}
